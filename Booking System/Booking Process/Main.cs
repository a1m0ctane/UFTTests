/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘Booking Process.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1 = null;
        public BindDirection bind_dir2 = null;
        public BindDirection bind_dir3 = null;
        public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        public BindDirection bind_dir7 = null;
        public BindDirection bind_dir8 = null;
        public BindDirection bind_dir9 = null;
        public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity29 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity29");
            _flow.DataFetchActivity26 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity26");
            _flow.DataFetchActivity23 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity23");
            _flow.DataFetchActivity20 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity20");
            _flow.DataFetchActivity17 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity17");
            _flow.DataFetchActivity14 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity14");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity16 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity16");
            _flow.DataExporterActivity19 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity19");
            _flow.DataExporterActivity22 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity22");
            _flow.DataExporterActivity25 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity25");
            _flow.DataExporterActivity28 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity28");
            _flow.DataExporterActivity31 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity31");
            _flow.DataExporterCloseActivity32 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity32");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity15 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity15");
            _flow.DataDisconnectActivity18 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity18");
            _flow.DataDisconnectActivity21 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity21");
            _flow.DataDisconnectActivity24 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity24");
            _flow.DataDisconnectActivity27 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity27");
            _flow.DataDisconnectActivity30 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity30");
            _flow.Sequence13 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence13");
            _flow.DataFetchActivity29.Comment = @"";
            _flow.DataFetchActivity29.IconPath = @"";
            _flow.DataFetchActivity29.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity29.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity29_QueryParameters_Document = new XmlDocument();
            DataFetchActivity29_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity29Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>48e24651-d0f4-4b92-a1ba-6e708fabc3a5</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>BookingData_happy!Global</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>BookingData_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{BookingData_happy!Global.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Global$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity29_QueryParameters_Document.LoadXml(xmlDataFetchActivity29Params);
            _flow.DataFetchActivity29.QueryParameters = DataFetchActivity29_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("BookingData_happy!Global", _flow.DataFetchActivity29);
            this.Activities.Add (_flow.DataFetchActivity29);
            _flow.DataFetchActivity26.Comment = @"";
            _flow.DataFetchActivity26.IconPath = @"";
            _flow.DataFetchActivity26.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity26.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity26_QueryParameters_Document = new XmlDocument();
            DataFetchActivity26_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity26Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>7ede65a0-e743-4094-ba69-9752891f00fd</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>BookingData_happy!'FR - Select Flight$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>BookingData_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{BookingData_happy!'FR - Select Flight$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Select Flight$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity26_QueryParameters_Document.LoadXml(xmlDataFetchActivity26Params);
            _flow.DataFetchActivity26.QueryParameters = DataFetchActivity26_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("BookingData_happy!'FR - Select Flight$'", _flow.DataFetchActivity26);
            this.Activities.Add (_flow.DataFetchActivity26);
            _flow.DataFetchActivity23.Comment = @"";
            _flow.DataFetchActivity23.IconPath = @"";
            _flow.DataFetchActivity23.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity23.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity23_QueryParameters_Document = new XmlDocument();
            DataFetchActivity23_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity23Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>a7d6bedd-33d0-4e05-94d5-4187fb3c862b</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>BookingData_happy!'FR - Login$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>BookingData_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{BookingData_happy!'FR - Login$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Login$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity23_QueryParameters_Document.LoadXml(xmlDataFetchActivity23Params);
            _flow.DataFetchActivity23.QueryParameters = DataFetchActivity23_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("BookingData_happy!'FR - Login$'", _flow.DataFetchActivity23);
            this.Activities.Add (_flow.DataFetchActivity23);
            _flow.DataFetchActivity20.Comment = @"";
            _flow.DataFetchActivity20.IconPath = @"";
            _flow.DataFetchActivity20.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity20.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity20_QueryParameters_Document = new XmlDocument();
            DataFetchActivity20_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity20Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>db402ad1-5a20-4cc1-bc92-923bd53a7176</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>BookingData_happy!'FR - Enter Passenger Details$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>BookingData_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{BookingData_happy!'FR - Enter Passenger Details$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Enter Passenger Details$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity20_QueryParameters_Document.LoadXml(xmlDataFetchActivity20Params);
            _flow.DataFetchActivity20.QueryParameters = DataFetchActivity20_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("BookingData_happy!'FR - Enter Passenger Details$'", _flow.DataFetchActivity20);
            this.Activities.Add (_flow.DataFetchActivity20);
            _flow.DataFetchActivity17.Comment = @"";
            _flow.DataFetchActivity17.IconPath = @"";
            _flow.DataFetchActivity17.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity17.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity17_QueryParameters_Document = new XmlDocument();
            DataFetchActivity17_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity17Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>2e40cb3e-90b4-40a5-b1ae-36e9836d86df</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>BookingData_happy!'FR - Enter Flight Details$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>BookingData_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{BookingData_happy!'FR - Enter Flight Details$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Enter Flight Details$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity17_QueryParameters_Document.LoadXml(xmlDataFetchActivity17Params);
            _flow.DataFetchActivity17.QueryParameters = DataFetchActivity17_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("BookingData_happy!'FR - Enter Flight Details$'", _flow.DataFetchActivity17);
            this.Activities.Add (_flow.DataFetchActivity17);
            _flow.DataFetchActivity14.Comment = @"";
            _flow.DataFetchActivity14.IconPath = @"";
            _flow.DataFetchActivity14.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity14.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity14_QueryParameters_Document = new XmlDocument();
            DataFetchActivity14_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity14Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>a173be2b-33d7-4f10-9871-66345c989d68</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>BookingData_happy!'FR - Close App$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>BookingData_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{BookingData_happy!'FR - Close App$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Close App$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity14_QueryParameters_Document.LoadXml(xmlDataFetchActivity14Params);
            _flow.DataFetchActivity14.QueryParameters = DataFetchActivity14_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("BookingData_happy!'FR - Close App$'", _flow.DataFetchActivity14);
            this.Activities.Add (_flow.DataFetchActivity14);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence13);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity16.Comment = @"";
            _flow.DataExporterActivity16.IconPath = @"";
            VTDPropertyInfoBase pi2 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi2);
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1 = new VTDObjectSetter(pi3);
            binding_setter1 = new StringFormaterDecorator(binding_setter1,"{Step.DataFetchActivity14.OutTable}");
            bind_dir1 = new BindDirection(_flow.DataFetchActivity14,binding_getter2,binding_setter1,BindTargetType.ToInProperty);
            _flow.DataExporterActivity16.InDirections.Add(bind_dir1);
            this.Activities.Add (_flow.DataExporterActivity16);
            _flow.DataExporterActivity19.Comment = @"";
            _flow.DataExporterActivity19.IconPath = @"";
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi4);
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi5);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity17.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity17,binding_getter3,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataExporterActivity19.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataExporterActivity19);
            _flow.DataExporterActivity22.Comment = @"";
            _flow.DataExporterActivity22.IconPath = @"";
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi6);
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi7);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity20.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity20,binding_getter4,binding_setter3,BindTargetType.ToInProperty);
            _flow.DataExporterActivity22.InDirections.Add(bind_dir3);
            this.Activities.Add (_flow.DataExporterActivity22);
            _flow.DataExporterActivity25.Comment = @"";
            _flow.DataExporterActivity25.IconPath = @"";
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter5 = new VTDObjectGetter(pi8);
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi9);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{Step.DataFetchActivity23.OutTable}");
            bind_dir4 = new BindDirection(_flow.DataFetchActivity23,binding_getter5,binding_setter4,BindTargetType.ToInProperty);
            _flow.DataExporterActivity25.InDirections.Add(bind_dir4);
            this.Activities.Add (_flow.DataExporterActivity25);
            _flow.DataExporterActivity28.Comment = @"";
            _flow.DataExporterActivity28.IconPath = @"";
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter6 = new VTDObjectGetter(pi10);
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi11);
            binding_setter5 = new StringFormaterDecorator(binding_setter5,"{Step.DataFetchActivity26.OutTable}");
            bind_dir5 = new BindDirection(_flow.DataFetchActivity26,binding_getter6,binding_setter5,BindTargetType.ToInProperty);
            _flow.DataExporterActivity28.InDirections.Add(bind_dir5);
            this.Activities.Add (_flow.DataExporterActivity28);
            _flow.DataExporterActivity31.Comment = @"";
            _flow.DataExporterActivity31.IconPath = @"";
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi12);
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi13);
            binding_setter6 = new StringFormaterDecorator(binding_setter6,"{Step.DataFetchActivity29.OutTable}");
            bind_dir6 = new BindDirection(_flow.DataFetchActivity29,binding_getter7,binding_setter6,BindTargetType.ToInProperty);
            _flow.DataExporterActivity31.InDirections.Add(bind_dir6);
            this.Activities.Add (_flow.DataExporterActivity31);
            _flow.DataExporterCloseActivity32.Comment = @"";
            _flow.DataExporterCloseActivity32.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity32);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity15.Comment = @"";
            _flow.DataDisconnectActivity15.IconPath = @"";
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter8 = new VTDObjectGetter(pi14);
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter7 = new VTDObjectSetter(pi15);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{Step.DataFetchActivity14.OutTable}");
            bind_dir7 = new BindDirection(_flow.DataFetchActivity14,binding_getter8,binding_setter7,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity15.InDirections.Add(bind_dir7);
            this.Activities.Add (_flow.DataDisconnectActivity15);
            _flow.DataDisconnectActivity18.Comment = @"";
            _flow.DataDisconnectActivity18.IconPath = @"";
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter9 = new VTDObjectGetter(pi16);
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter8 = new VTDObjectSetter(pi17);
            binding_setter8 = new StringFormaterDecorator(binding_setter8,"{Step.DataFetchActivity17.OutTable}");
            bind_dir8 = new BindDirection(_flow.DataFetchActivity17,binding_getter9,binding_setter8,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity18.InDirections.Add(bind_dir8);
            this.Activities.Add (_flow.DataDisconnectActivity18);
            _flow.DataDisconnectActivity21.Comment = @"";
            _flow.DataDisconnectActivity21.IconPath = @"";
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi18);
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter9 = new VTDObjectSetter(pi19);
            binding_setter9 = new StringFormaterDecorator(binding_setter9,"{Step.DataFetchActivity20.OutTable}");
            bind_dir9 = new BindDirection(_flow.DataFetchActivity20,binding_getter10,binding_setter9,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity21.InDirections.Add(bind_dir9);
            this.Activities.Add (_flow.DataDisconnectActivity21);
            _flow.DataDisconnectActivity24.Comment = @"";
            _flow.DataDisconnectActivity24.IconPath = @"";
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter11 = new VTDObjectGetter(pi20);
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter10 = new VTDObjectSetter(pi21);
            binding_setter10 = new StringFormaterDecorator(binding_setter10,"{Step.DataFetchActivity23.OutTable}");
            bind_dir10 = new BindDirection(_flow.DataFetchActivity23,binding_getter11,binding_setter10,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity24.InDirections.Add(bind_dir10);
            this.Activities.Add (_flow.DataDisconnectActivity24);
            _flow.DataDisconnectActivity27.Comment = @"";
            _flow.DataDisconnectActivity27.IconPath = @"";
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi22);
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter11 = new VTDObjectSetter(pi23);
            binding_setter11 = new StringFormaterDecorator(binding_setter11,"{Step.DataFetchActivity26.OutTable}");
            bind_dir11 = new BindDirection(_flow.DataFetchActivity26,binding_getter12,binding_setter11,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity27.InDirections.Add(bind_dir11);
            this.Activities.Add (_flow.DataDisconnectActivity27);
            _flow.DataDisconnectActivity30.Comment = @"";
            _flow.DataDisconnectActivity30.IconPath = @"";
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter13 = new VTDObjectGetter(pi24);
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter12 = new VTDObjectSetter(pi25);
            binding_setter12 = new StringFormaterDecorator(binding_setter12,"{Step.DataFetchActivity29.OutTable}");
            bind_dir12 = new BindDirection(_flow.DataFetchActivity29,binding_getter13,binding_setter12,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity30.InDirections.Add(bind_dir12);
            this.Activities.Add (_flow.DataDisconnectActivity30);
            _flow.Sequence13.Comment = @"";
            _flow.Sequence13.IconPath = @"";
            _flow.Sequence13.Name = @"Sequence13";
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    