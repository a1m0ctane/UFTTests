/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘Booking Process.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1 = null;
        public BindDirection bind_dir2 = null;
        public BindDirection bind_dir3 = null;
        public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public BindDirection bind_dir6 = null;
        public BindDirection bind_dir7 = null;
        public BindDirection bind_dir8 = null;
        public BindDirection bind_dir9 = null;
        public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity62 = null;
        public BindDirection bind_dir13 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity62_Policy = null;
        public BindDirection bind_dir14 = null;
        public BindDirection bind_dir15 = null;
        public BindDirection bind_dir16 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            FeaturesGroup fg2 = new FeaturesGroup();
            FeaturesGroup fg3 = new FeaturesGroup();
            FeaturesGroup fg4 = new FeaturesGroup();
            FeaturesGroup fg5 = new FeaturesGroup();
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity58 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity58");
            _flow.DataFetchActivity55 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity55");
            _flow.DataFetchActivity52 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity52");
            _flow.DataFetchActivity49 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity49");
            _flow.DataFetchActivity46 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity46");
            _flow.DataFetchActivity43 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity43");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity45 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity45");
            _flow.DataExporterActivity48 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity48");
            _flow.DataExporterActivity51 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity51");
            _flow.DataExporterActivity54 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity54");
            _flow.DataExporterActivity57 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity57");
            _flow.DataExporterActivity60 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity60");
            _flow.DataExporterCloseActivity61 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity61");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity44 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity44");
            _flow.DataDisconnectActivity47 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity47");
            _flow.DataDisconnectActivity50 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity50");
            _flow.DataDisconnectActivity53 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity53");
            _flow.DataDisconnectActivity56 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity56");
            _flow.DataDisconnectActivity59 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity59");
            this.DataCursorActivity62 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity62");
            this.DataCursorActivity62_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence42 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence42");
            _flow.CallQTPTest32 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest32");
            _flow.IfElse33 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse33Input>(_context,"IfElse33");
            _flow.IfElseBranch34 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch34");
            _flow.IfElseBranch35 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch35");
            _flow.CallQTPTest36 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest36");
            _flow.CallQTPTest37 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest37");
            _flow.CallQTPTest38 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest38");
            _flow.CallQTPTest39 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest39");
            _flow.StServiceCallActivity40 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity40");
            _flow.StServiceCallActivity41 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity41");
            _flow.DataFetchActivity58.Comment = @"";
            _flow.DataFetchActivity58.IconPath = @"";
            _flow.DataFetchActivity58.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity58.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity58_QueryParameters_Document = new XmlDocument();
            DataFetchActivity58_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity58Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>7bb46107-f807-42f7-9678-9361a9be401d</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Data_Synthetic_happy!Global</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Data_Synthetic_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Data_Synthetic_happy!Global.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Global$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity58_QueryParameters_Document.LoadXml(xmlDataFetchActivity58Params);
            _flow.DataFetchActivity58.QueryParameters = DataFetchActivity58_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Data_Synthetic_happy!Global", _flow.DataFetchActivity58);
            this.Activities.Add (_flow.DataFetchActivity58);
            _flow.DataFetchActivity55.Comment = @"";
            _flow.DataFetchActivity55.IconPath = @"";
            _flow.DataFetchActivity55.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity55.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity55_QueryParameters_Document = new XmlDocument();
            DataFetchActivity55_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity55Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>3ebd110e-e513-4142-9616-028b66674d61</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Data_Synthetic_happy!'FR - Select Flight$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Data_Synthetic_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Data_Synthetic_happy!'FR - Select Flight$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Select Flight$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity55_QueryParameters_Document.LoadXml(xmlDataFetchActivity55Params);
            _flow.DataFetchActivity55.QueryParameters = DataFetchActivity55_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Data_Synthetic_happy!'FR - Select Flight$'", _flow.DataFetchActivity55);
            this.Activities.Add (_flow.DataFetchActivity55);
            _flow.DataFetchActivity52.Comment = @"";
            _flow.DataFetchActivity52.IconPath = @"";
            _flow.DataFetchActivity52.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity52.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity52_QueryParameters_Document = new XmlDocument();
            DataFetchActivity52_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity52Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>d48d26b7-ff81-4be3-bb32-e5d99ab6fb6f</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Data_Synthetic_happy!'FR - Search Flights$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Data_Synthetic_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Data_Synthetic_happy!'FR - Search Flights$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Search Flights$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity52_QueryParameters_Document.LoadXml(xmlDataFetchActivity52Params);
            _flow.DataFetchActivity52.QueryParameters = DataFetchActivity52_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Data_Synthetic_happy!'FR - Search Flights$'", _flow.DataFetchActivity52);
            this.Activities.Add (_flow.DataFetchActivity52);
            _flow.DataFetchActivity49.Comment = @"";
            _flow.DataFetchActivity49.IconPath = @"";
            _flow.DataFetchActivity49.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity49.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity49_QueryParameters_Document = new XmlDocument();
            DataFetchActivity49_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity49Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>cf0fb6b2-8291-4a59-ab04-319bae24f4c4</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Data_Synthetic_happy!'FR - Login$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Data_Synthetic_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Data_Synthetic_happy!'FR - Login$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Login$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity49_QueryParameters_Document.LoadXml(xmlDataFetchActivity49Params);
            _flow.DataFetchActivity49.QueryParameters = DataFetchActivity49_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Data_Synthetic_happy!'FR - Login$'", _flow.DataFetchActivity49);
            this.Activities.Add (_flow.DataFetchActivity49);
            _flow.DataFetchActivity46.Comment = @"";
            _flow.DataFetchActivity46.IconPath = @"";
            _flow.DataFetchActivity46.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity46.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity46_QueryParameters_Document = new XmlDocument();
            DataFetchActivity46_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity46Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>317ecadd-e790-4d79-a6c2-1f377ce49a1d</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Data_Synthetic_happy!'FR - Enter Passenger Details$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Data_Synthetic_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Data_Synthetic_happy!'FR - Enter Passenger Details$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Enter Passenger Details$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity46_QueryParameters_Document.LoadXml(xmlDataFetchActivity46Params);
            _flow.DataFetchActivity46.QueryParameters = DataFetchActivity46_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Data_Synthetic_happy!'FR - Enter Passenger Details$'", _flow.DataFetchActivity46);
            this.Activities.Add (_flow.DataFetchActivity46);
            _flow.DataFetchActivity43.Comment = @"";
            _flow.DataFetchActivity43.IconPath = @"";
            _flow.DataFetchActivity43.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity43.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity43_QueryParameters_Document = new XmlDocument();
            DataFetchActivity43_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity43Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>67d818bb-e376-43ea-9dc2-1f6a095f7e28</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Data_Synthetic_happy!'FR - Close App$'</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Data_Synthetic_happy</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Data_Synthetic_happy!'FR - Close App$'.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>'FR - Close App$'</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity43_QueryParameters_Document.LoadXml(xmlDataFetchActivity43Params);
            _flow.DataFetchActivity43.QueryParameters = DataFetchActivity43_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Data_Synthetic_happy!'FR - Close App$'", _flow.DataFetchActivity43);
            this.Activities.Add (_flow.DataFetchActivity43);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity62);
            _flow.Loop2.Activities.Add (_flow.Sequence42);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity45.Comment = @"";
            _flow.DataExporterActivity45.IconPath = @"";
            VTDPropertyInfoBase pi1 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1 = new VTDObjectGetter(pi1);
            VTDPropertyInfoBase pi2 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1 = new VTDObjectSetter(pi2);
            binding_setter1 = new StringFormaterDecorator(binding_setter1,"{Step.DataFetchActivity43.OutTable}");
            bind_dir1 = new BindDirection(_flow.DataFetchActivity43,binding_getter1,binding_setter1,BindTargetType.ToInProperty);
            _flow.DataExporterActivity45.InDirections.Add(bind_dir1);
            this.Activities.Add (_flow.DataExporterActivity45);
            _flow.DataExporterActivity48.Comment = @"";
            _flow.DataExporterActivity48.IconPath = @"";
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi3);
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi4);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity46.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity46,binding_getter2,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataExporterActivity48.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataExporterActivity48);
            _flow.DataExporterActivity51.Comment = @"";
            _flow.DataExporterActivity51.IconPath = @"";
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi5);
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi6);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity49.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity49,binding_getter3,binding_setter3,BindTargetType.ToInProperty);
            _flow.DataExporterActivity51.InDirections.Add(bind_dir3);
            this.Activities.Add (_flow.DataExporterActivity51);
            _flow.DataExporterActivity54.Comment = @"";
            _flow.DataExporterActivity54.IconPath = @"";
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi8);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{Step.DataFetchActivity52.OutTable}");
            bind_dir4 = new BindDirection(_flow.DataFetchActivity52,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.DataExporterActivity54.InDirections.Add(bind_dir4);
            this.Activities.Add (_flow.DataExporterActivity54);
            _flow.DataExporterActivity57.Comment = @"";
            _flow.DataExporterActivity57.IconPath = @"";
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter5 = new VTDObjectGetter(pi9);
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi10);
            binding_setter5 = new StringFormaterDecorator(binding_setter5,"{Step.DataFetchActivity55.OutTable}");
            bind_dir5 = new BindDirection(_flow.DataFetchActivity55,binding_getter5,binding_setter5,BindTargetType.ToInProperty);
            _flow.DataExporterActivity57.InDirections.Add(bind_dir5);
            this.Activities.Add (_flow.DataExporterActivity57);
            _flow.DataExporterActivity60.Comment = @"";
            _flow.DataExporterActivity60.IconPath = @"";
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter6 = new VTDObjectGetter(pi11);
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi12);
            binding_setter6 = new StringFormaterDecorator(binding_setter6,"{Step.DataFetchActivity58.OutTable}");
            bind_dir6 = new BindDirection(_flow.DataFetchActivity58,binding_getter6,binding_setter6,BindTargetType.ToInProperty);
            _flow.DataExporterActivity60.InDirections.Add(bind_dir6);
            this.Activities.Add (_flow.DataExporterActivity60);
            _flow.DataExporterCloseActivity61.Comment = @"";
            _flow.DataExporterCloseActivity61.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity61);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity44.Comment = @"";
            _flow.DataDisconnectActivity44.IconPath = @"";
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi13);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter7 = new VTDObjectSetter(pi14);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{Step.DataFetchActivity43.OutTable}");
            bind_dir7 = new BindDirection(_flow.DataFetchActivity43,binding_getter7,binding_setter7,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity44.InDirections.Add(bind_dir7);
            this.Activities.Add (_flow.DataDisconnectActivity44);
            _flow.DataDisconnectActivity47.Comment = @"";
            _flow.DataDisconnectActivity47.IconPath = @"";
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter8 = new VTDObjectGetter(pi15);
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter8 = new VTDObjectSetter(pi16);
            binding_setter8 = new StringFormaterDecorator(binding_setter8,"{Step.DataFetchActivity46.OutTable}");
            bind_dir8 = new BindDirection(_flow.DataFetchActivity46,binding_getter8,binding_setter8,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity47.InDirections.Add(bind_dir8);
            this.Activities.Add (_flow.DataDisconnectActivity47);
            _flow.DataDisconnectActivity50.Comment = @"";
            _flow.DataDisconnectActivity50.IconPath = @"";
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter9 = new VTDObjectGetter(pi17);
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter9 = new VTDObjectSetter(pi18);
            binding_setter9 = new StringFormaterDecorator(binding_setter9,"{Step.DataFetchActivity49.OutTable}");
            bind_dir9 = new BindDirection(_flow.DataFetchActivity49,binding_getter9,binding_setter9,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity50.InDirections.Add(bind_dir9);
            this.Activities.Add (_flow.DataDisconnectActivity50);
            _flow.DataDisconnectActivity53.Comment = @"";
            _flow.DataDisconnectActivity53.IconPath = @"";
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi19);
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter10 = new VTDObjectSetter(pi20);
            binding_setter10 = new StringFormaterDecorator(binding_setter10,"{Step.DataFetchActivity52.OutTable}");
            bind_dir10 = new BindDirection(_flow.DataFetchActivity52,binding_getter10,binding_setter10,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity53.InDirections.Add(bind_dir10);
            this.Activities.Add (_flow.DataDisconnectActivity53);
            _flow.DataDisconnectActivity56.Comment = @"";
            _flow.DataDisconnectActivity56.IconPath = @"";
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter11 = new VTDObjectGetter(pi21);
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter11 = new VTDObjectSetter(pi22);
            binding_setter11 = new StringFormaterDecorator(binding_setter11,"{Step.DataFetchActivity55.OutTable}");
            bind_dir11 = new BindDirection(_flow.DataFetchActivity55,binding_getter11,binding_setter11,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity56.InDirections.Add(bind_dir11);
            this.Activities.Add (_flow.DataDisconnectActivity56);
            _flow.DataDisconnectActivity59.Comment = @"";
            _flow.DataDisconnectActivity59.IconPath = @"";
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi23);
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter12 = new VTDObjectSetter(pi24);
            binding_setter12 = new StringFormaterDecorator(binding_setter12,"{Step.DataFetchActivity58.OutTable}");
            bind_dir12 = new BindDirection(_flow.DataFetchActivity58,binding_getter12,binding_setter12,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity59.InDirections.Add(bind_dir12);
            this.Activities.Add (_flow.DataDisconnectActivity59);
            this.DataCursorActivity62.Comment = @"";
            this.DataCursorActivity62.IconPath = @"";
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter13 = new VTDObjectGetter(pi25);
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter13 = new VTDObjectSetter(pi26);
            binding_setter13 = new StringFormaterDecorator(binding_setter13,"{Step.DataFetchActivity58.OutTable}");
            bind_dir13 = new BindDirection(_flow.DataFetchActivity58,binding_getter13,binding_setter13,BindTargetType.ToInProperty);
            this.DataCursorActivity62.InDirections.Add(bind_dir13);
            this.DataCursorActivity62_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity62_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity62_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity62_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity62_Policy.StartCondition.Value = "";
            this.DataCursorActivity62_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity62_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity62_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity62_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity62_Policy.EndCondition.Value = "";
            this.DataCursorActivity62_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity62_Policy.StepSize = 1;
            this.DataCursorActivity62_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity62.Policy = this.DataCursorActivity62_Policy;
            this.DataCursorActivity62.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity62.ResetCursor;
            _flow.Sequence42.Comment = @"";
            _flow.Sequence42.IconPath = @"";
            _flow.Sequence42.Name = @"Sequence42";
            _flow.Sequence42.Activities.Add (_flow.CallQTPTest32);
            _flow.Sequence42.Activities.Add (_flow.IfElse33);
            XmlDocument CallQTPTest32_InputArguments_Document = new XmlDocument();
            CallQTPTest32_InputArguments_Document.PreserveWhitespace = true;
            CallQTPTest32_InputArguments_Document.LoadXml(
@"<Arguments><Agent>{DataSource.Data_Synthetic_happy!Global.Agentname}</Agent><Password>{DataSource.Data_Synthetic_happy!Global.Password}</Password></Arguments>");
            _flow.CallQTPTest32.InputArguments = CallQTPTest32_InputArguments_Document;
            _flow.CallQTPTest32.Comment = @"";
            _flow.CallQTPTest32.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest32.Name = @"Create New Order.FR - Login";
            _flow.CallQTPTest32.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.ScriptPath}")) ? @"..\..\adm\Create New Order" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.ScriptPath}");
            _flow.CallQTPTest32.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.ActionName}")) ? @"FR - Login" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.ActionName}");
            _flow.CallQTPTest32.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.Description}");
            _flow.CallQTPTest32.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.IsActionSelected}");
            _flow.CallQTPTest32.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.ResultLocation}");
            _flow.CallQTPTest32.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest32.QCScriptPath}");
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("Password");
            VTDBaseGetter binding_getter14 = new VTDObjectGetter(pi27);
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("InputArguments","/*[local-name(.)='Arguments'][1]/*[local-name(.)='Password'][1]");
            VTDBaseSetter binding_setter14 = new VTDXPathSetter(pi28,XmlTypeCode.String);
            binding_setter14 = new StringFormaterDecorator(binding_setter14,"{DataSource.Data_Synthetic_happy!Global.Password}");
            bind_dir14 = new BindDirection(this.DataCursorActivity62,binding_getter14,binding_setter14,BindTargetType.ToInProperty);
            _flow.CallQTPTest32.InDirections.Add(bind_dir14);
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("Agentname");
            VTDBaseGetter binding_getter15 = new VTDObjectGetter(pi29);
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("InputArguments","/*[local-name(.)='Arguments'][1]/*[local-name(.)='Agent'][1]");
            VTDBaseSetter binding_setter15 = new VTDXPathSetter(pi30,XmlTypeCode.String);
            binding_setter15 = new StringFormaterDecorator(binding_setter15,"{DataSource.Data_Synthetic_happy!Global.Agentname}");
            bind_dir15 = new BindDirection(this.DataCursorActivity62,binding_getter15,binding_setter15,BindTargetType.ToInProperty);
            _flow.CallQTPTest32.InDirections.Add(bind_dir15);
            _flow.IfElse33.ConditionAsString = @"{Step.OutputProperties.CallQTPTest32.Logged_In} Equal True";
            _flow.IfElse33.Comment = @"";
            _flow.IfElse33.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse33.Name = @"Login Successful";
            _flow.IfElse33.Activities.Add (_flow.IfElseBranch34);
            _flow.IfElse33.Activities.Add (_flow.IfElseBranch35);
            _flow.IfElseBranch34.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi31 = new VTDPropertyInfoBase("OutputArguments","/*[local-name(.)='Arguments'][1]/*[local-name(.)='Logged_In'][1]");
            VTDBaseGetter binding_getter16 = new VTDXPathGetter(pi31,XmlTypeCode.Boolean);
            		System.Boolean expr00 = (System.Boolean)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.CallQTPTest32.GetParam(binding_getter16),typeof(System.Boolean));
            		var result0 = expr00;
            		System.Boolean result1 = (System.Boolean)(true);
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch34.Comment = @"";
            _flow.IfElseBranch34.IconPath = @"";
            _flow.IfElseBranch34.Name = @"Yes";
            _flow.IfElseBranch34.Activities.Add (_flow.CallQTPTest36);
            _flow.IfElseBranch34.Activities.Add (_flow.CallQTPTest37);
            _flow.IfElseBranch34.Activities.Add (_flow.CallQTPTest38);
            _flow.IfElseBranch34.Activities.Add (_flow.CallQTPTest39);
            _flow.IfElseBranch35.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch35.Comment = @"";
            _flow.IfElseBranch35.IconPath = @"";
            _flow.IfElseBranch35.Name = @"No";
            _flow.IfElseBranch35.Activities.Add (_flow.StServiceCallActivity40);
            _flow.IfElseBranch35.Activities.Add (_flow.StServiceCallActivity41);
            XmlDocument CallQTPTest36_InputArguments_Document = new XmlDocument();
            CallQTPTest36_InputArguments_Document.PreserveWhitespace = true;
            CallQTPTest36_InputArguments_Document.LoadXml(
@"<Arguments><FlyFrom>Denver</FlyFrom><FlyTo>Frankfurt</FlyTo><Date>20/02/2021</Date><Class>Economy</Class><NumOfTicket>1</NumOfTicket></Arguments>");
            _flow.CallQTPTest36.InputArguments = CallQTPTest36_InputArguments_Document;
            _flow.CallQTPTest36.Comment = @"";
            _flow.CallQTPTest36.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest36.Name = @"Create New Order.FR - Search Flights";
            _flow.CallQTPTest36.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.ScriptPath}")) ? @"..\..\adm\Create New Order" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.ScriptPath}");
            _flow.CallQTPTest36.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.ActionName}")) ? @"FR - Search Flights" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.ActionName}");
            _flow.CallQTPTest36.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.Description}");
            _flow.CallQTPTest36.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.IsActionSelected}");
            _flow.CallQTPTest36.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.ResultLocation}");
            _flow.CallQTPTest36.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest36.QCScriptPath}");
            _flow.CallQTPTest37.Comment = @"";
            _flow.CallQTPTest37.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest37.Name = @"Create New Order.FR - Select Flight";
            _flow.CallQTPTest37.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.ScriptPath}")) ? @"..\..\adm\Create New Order" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.ScriptPath}");
            _flow.CallQTPTest37.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.ActionName}")) ? @"FR - Select Flight" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.ActionName}");
            _flow.CallQTPTest37.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.Description}");
            _flow.CallQTPTest37.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.IsActionSelected}");
            _flow.CallQTPTest37.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.ResultLocation}");
            _flow.CallQTPTest37.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest37.QCScriptPath}");
            XmlDocument CallQTPTest38_InputArguments_Document = new XmlDocument();
            CallQTPTest38_InputArguments_Document.PreserveWhitespace = true;
            CallQTPTest38_InputArguments_Document.LoadXml(
@"<Arguments><Passenger>Amir Khan</Passenger></Arguments>");
            _flow.CallQTPTest38.InputArguments = CallQTPTest38_InputArguments_Document;
            _flow.CallQTPTest38.Comment = @"";
            _flow.CallQTPTest38.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest38.Name = @"Create New Order.FR - Enter Passenger Details";
            _flow.CallQTPTest38.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.ScriptPath}")) ? @"..\..\adm\Create New Order" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.ScriptPath}");
            _flow.CallQTPTest38.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.ActionName}")) ? @"FR - Enter Passenger Details" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.ActionName}");
            _flow.CallQTPTest38.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.Description}");
            _flow.CallQTPTest38.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.IsActionSelected}");
            _flow.CallQTPTest38.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.ResultLocation}");
            _flow.CallQTPTest38.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest38.QCScriptPath}");
            _flow.CallQTPTest39.Comment = @"";
            _flow.CallQTPTest39.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest39.Name = @"Create New Order.FR - Close App";
            _flow.CallQTPTest39.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.ScriptPath}")) ? @"..\..\adm\Create New Order" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.ScriptPath}");
            _flow.CallQTPTest39.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.ActionName}")) ? @"FR - Close App" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.ActionName}");
            _flow.CallQTPTest39.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.Description}");
            _flow.CallQTPTest39.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.IsActionSelected}");
            _flow.CallQTPTest39.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.ResultLocation}");
            _flow.CallQTPTest39.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest39.QCScriptPath}");
            XmlDocument StServiceCallActivity40_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity40_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity40_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>Frankfurt</DepartureCity><ArrivalCity>Los Angeles</ArrivalCity><FlightDate>2020-02-14T00:00:00+00:00</FlightDate></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity40.InputEnvelope = StServiceCallActivity40_InputEnvelope_Document;
            _flow.StServiceCallActivity40.Comment = @"";
            _flow.StServiceCallActivity40.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity40.Name = @"GetFlights";
            _flow.StServiceCallActivity40.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity40.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity40.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity40.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity40.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity40.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity40.Service = @"Flights_Service";
            _flow.StServiceCallActivity40.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity40.Operation = @"GetFlights";
            _flow.StServiceCallActivity40.IsOneWay = false;
            _flow.StServiceCallActivity40.SendRequestToService=true;
            _flow.StServiceCallActivity40.FaultExpected=false;
            _flow.StServiceCallActivity40.IsAsync=false;
            _flow.StServiceCallActivity40.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity40.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity40_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity40_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity40_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity40.ExpectedOutputAttachments = StServiceCallActivity40_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity40_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity40_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity40_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity40.ExpectedFaultProperties = StServiceCallActivity40_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity40_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity40_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity40_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity40.ExpectedOutputProperties = StServiceCallActivity40_ExpectedOutputProperties_Document;
            set_StServiceCallActivity40_checkpoints(_flow.StServiceCallActivity40);
            XmlDocument StServiceCallActivity41_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity41_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity41_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>Economy</Class><CustomerName>Amir Khan</CustomerName><DepartureDate>2020-02-21T00:00:00+00:00</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity40.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>1</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity41.InputEnvelope = StServiceCallActivity41_InputEnvelope_Document;
            _flow.StServiceCallActivity41.Comment = @"";
            _flow.StServiceCallActivity41.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity41.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity41.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity41.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity41.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity41.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity41.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity41.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity41.Service = @"Flights_Service";
            _flow.StServiceCallActivity41.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity41.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity41.IsOneWay = false;
            _flow.StServiceCallActivity41.SendRequestToService=true;
            _flow.StServiceCallActivity41.FaultExpected=false;
            _flow.StServiceCallActivity41.IsAsync=false;
            _flow.StServiceCallActivity41.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity41.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi32 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter17 = new VTDXPathGetter(pi32,XmlTypeCode.Int);
            binding_getter17 = new XPathGetterDecorator(binding_getter17,"{Array0}",1);
            VTDPropertyInfoBase pi33 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter16 = new VTDXPathSetter(pi33,XmlTypeCode.Int);
            bind_dir16 = new BindDirection(_flow.StServiceCallActivity40,binding_getter17,binding_setter16,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity41.InDirections.Add(bind_dir16);
            XmlDocument StServiceCallActivity41_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity41_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity41_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity41.ExpectedOutputAttachments = StServiceCallActivity41_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity41_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity41_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity41_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity41.ExpectedFaultProperties = StServiceCallActivity41_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity41_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity41_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity41_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity41.ExpectedOutputProperties = StServiceCallActivity41_ExpectedOutputProperties_Document;
            set_StServiceCallActivity41_checkpoints(_flow.StServiceCallActivity41);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    